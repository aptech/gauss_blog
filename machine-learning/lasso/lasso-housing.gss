/*
**
*/
new;
library gml;
rndseed 8906876;

/*
** Load datafile
*/
housing_data = packr(loadd("data/housing.csv"));

// Split data
y = housing_data[., "median_house_value"];
X = delcols(housing_data, "median_house_value"$|"ocean_proximity");

// Create dummy variables
{ labels, keys } = getColLabels(housing_data, "ocean_proximity");

// Storage matrix for dummies
num_dummies = rows(labels);
dummy_matrix = zeros(rows(housing_data), num_dummies);

for i(1, num_dummies, 1);
    dummy_matrix[., i] = (housing_data[., "ocean_proximity"] .== labels[i]);
endfor;

dummy_matrix = asDF(dummy_matrix, labels);

/*  
** Preliminary data exploration
*/
// Quicnfolds data summary
dstatmt(housing_data);


/*
** Hyperparameter tuning
** using nfolds-fold cross validation
*/

// Vector of potential lambda
lambda = seqa(0.1, 0.1, 1000);

// Number of folds
nfolds = 5;

// Create storage matrices
total_accuracy = zeros(rows(lambda), 1);
mse_testing = zeros(nfolds, rows(lambda));

// Declare 'mdl' to be an instance of a
// lassoModel structure to hold the estimation results
struct lassoModel mdl;

// Hyper-parameter tuning
// cross-validation loop

// Loop over all lambdas
for j(1, nfolds, 1);
        { y_train, y_test, X_train, X_test } = cvSplit(y, X, nfolds, j);
    
        // Estimate the model with default settings
        mdl = lassoFit(y_train, X_train, lambda);
    
        // Predictions
        predictions = lmPredict(mdl, x_test);
    
        // Check accuracy
        mse_testing[j, .] = meanSquaredError(y_test, predictions);
  
endfor;
    
total_mse = meanc(mse_testing);
//endfor;

        


