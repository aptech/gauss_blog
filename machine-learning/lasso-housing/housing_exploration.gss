// Clear workspaces
// and load library
new;
library gml;

// Set random seed
rndseed 8906876;

/*
** Import datafile
*/
load_path = "data";
fname = "/housing.csv";

// Load and remove missing values
housing_data = loadd(load_path $+ fname);

/*
** Preliminary data exploration
** with descriptive statistics
*/
// Find descriptive statistics
// for all variables in housing_data
dstatmt(housing_data);

// Conditional check 
// for missing values
e = housing_data[., "total_bedrooms"] .== miss();

// Get descriptive statistics
// for dataset with missing values
dstatmt(selif(housing_data, e));

// Get descriptive statistics
// for dataset without missing values
dstatmt(delif(housing_data, e));

// Remove rows with missing values
// from housing_data
housing_data = packr(housing_data);

/*
** Data visualizations to 
** to check for outliers
*/
/*
** Histogram
*/
// Get variables names
vars = getColNames(housing_data);

// Set up plotControl 
// structure for formatting
// graphs
struct plotControl plt;
plt = plotGetDefaults("bar");

// Set fonts
plotSetFonts(&plt, "title", "Arial", 14);
plotSetFonts(&plt, "ticks", "Arial", 12);

// Loop through variables for histogram
for i(1, rows(vars)-1, 1);
    plotSetTitle(&plt, vars[i]);
    plotLayout(3, 3, i);
    plotHist(plt, housing_data[., vars[i]], 50);
endfor;

/*
** Box plots with full data
*/

// Set up plot control
struct plotControl plt2;
plt2 = plotGetDefaults("box");

// Set fonts
plotSetFonts(&plt2, "title", "Arial", 14);
plotSetFonts(&plt2, "ticks", "Arial", 12);

// Names of box plot variables
string box_vars = { "total_rooms", "total_bedrooms", "households", "population" };

// Open new window and clear layout
plotOpenWindow();
plotClearLayout();

for i(1, rows(outlier_vars), 1);
    plotLayout(2, 2, i);
    plotBox(plt2, outlier_vars[i], housing_data[., outlier_vars[i]]);
endfor;

/*
** Filter to remove outliers
**
** Delete:
**    - total_rooms greater than or equal to 10000
**    - total_bedrooms greater than or equal to 20000
**    - households greater than or equal to 2000
**    - population greater than or equal to 6000
*/
mask = housing_data[., "total_rooms"] .>= 10000;
mask = mask .or housing_data[., "total_bedrooms"] .>= 2000;
mask = mask .or housing_data[., "households"] .>= 2000;
mask = mask .or housing_data[., "population"] .>= 6000;
 
housing_data = delif(housing_data, mask);

/*
** Box plots with outliers 
** removed
*/
plotOpenWindow();
for i(1, rows(outlier_vars), 1);
    plotSetTitle(&plt, outlier_vars[i]);
    plotLayout(2, 2, i);
    plotHist(plt, housing_data[., outlier_vars[i]], 50);
endfor;

plotOpenWindow();
for i(1, rows(outlier_vars), 1);
    plotLayout(2, 2, i);
    plotBox(plt2, outlier_vars[i], housing_data[., outlier_vars[i]]);
endfor;

plotClearLayout();


/*
** Examine truncated data
*/
// Count most frequently occurring 
// value of median house value
mode_value = modec(housing_data[., "median_house_value"]);
print "Most frequent median_house_value:" mode_value;

print "Counts:";
sumc(housing_data[., "median_house_value"] .== mode_value);

// Count most frequently occurring 
// value of housing_median_age
// House age
mode_age = modec(housing_data[., "housing_median_age"]);
print "Most frequent housing_median_age:" mode_age;
 
print "Counts:";
sumc(housing_data[., "housing_median_age"] .== mode_age);

// Create binary vector with a 1 if either
// 'housing_median_age' or 'median_house_value'
// equal their mode value.
mask = (housing_data[., "housing_median_age"] .== mode_age)
       .or (housing_data[., "median_house_value"] .== mode_value);
 
// Delete the rows if they meet our above criteria
housing_data = delif(housing_data, mask);

/*
** Feature modifications
*/
// Rescale median income variable
housing_data[., "median_house_value"] = 
housing_data[., "median_house_value"]/10000;


/*
** Categorical data
*/
// Check frequency of
// ocean_proximity categories
frequency(housing_data, "ocean_proximity");

// Generate dummy variables for 
// the categorical ocean_proximity variable
dummy_matrix = oneHot(housing_data[., "ocean_proximity"]);

/*
** Save data
*/
// Build matrix of features
// Note we exclude ISLAND
// dummy variable
model_data = delcols(housing_data, "ocean_proximity")~delcols(dummy_matrix, "ocean_proximity_ISLAND");

// Saved data matrix
saved(model_data, load_path $+ "/model_data.gdat");
