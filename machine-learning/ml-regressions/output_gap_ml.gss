new;
library gml;
rndseed 23423;

/*
** Load data and prepare data
*/
// Load dataset
dataset = __FILE_DIR $+ "reg_data.gdat";
data = loadd(dataset);

// Trim data for lagged
// and differenced data
max_l = 4;
data = trimr(data, max_l+1, 0);

/*
** Extract outcome and features
*/
// Extract outcome variable
y = data[., "CBO_GAP"];

// Extract features
X = delcols(data, "date"$|"CBO_GAP");


/*
** Set up tuning parameters
*/

// L2 and L1 regularization penalty
lambda = 0.3;

/*
** Settings for decision forest
*/
// Use control structure for settings
struct dfControl dfc;
dfc = dfControlCreate();

// Turn on variable importance
dfc.variableImportanceMethod = 1;

// Turn on out-of-bag error calculation
dfc.oobError = 1;

/*
** Initialize starting point and
** storage matrix for expanding 
** window loop
*/
// Specify starting date 
st_date = asDate("1994-Q4", "%Y-Q%q");
 
// Find the index of 'st_date'
st_indx = indnv(st_date, data[., "date"]); 

// Set up storage matrix for predictions
// one column for each model
osa_pred = asDF(zeros(rows(X), 3), "Lasso", "Ridge", "Decision Forest");

do while st_indx < rows(X)-1;
    
    // Get y and x subsets for
    // fitting and prediction
    y_train = Y[1:st_indx];
    x_train = X[1:st_indx, .]; 
    x_test = X[st_indx+1, .];
    
    // Lasso Model
    osa_pred[st_indx+1, 1] = osaLasso(y_train, x_train, x_test, lambda);
    
    // Ridge Model
    osa_pred[st_indx+1, 2] = osaRidge(y_train, x_train, x_test, lambda);
    
    // Decision Forest Model
    osa_pred[st_indx+1, 3] = osaDF(y_train, x_train, x_test, dfc);
    
    // Update st_indx
    st_indx = st_indx + 1;
endo;

/*
** Plot results
*/

// Open new plot window
plotOpenWindow();

/*
** Set up plot format
*/
struct plotControl plt;
plt = plotGetDefaults("XY");

// Fonts
plotSetFonts(&plt, "ticks legend", "Arial", 14);
plotSetFonts(&plt, "Title", "Arial", 18);

// Set up legends
labels = "Ridge"$|"Lasso"$|"Decision Forest"$|"Observed";
plotSetLegend(&plt, labels, "bottom left");

// Set Canvas size
plotCanvasSize("px", 800|600);

// Set up x-axis ticks
plotSetXTicLabel(&plt, "YYYY");
plotSetXTicInterval(&plt, 20, "quarters", "2000");

// Filter data for plotting
dates = selif(data[., "date"], data[., "date"] .>= st_date);
predictions = selif(osa_pred~y, data[., "date"] .>= st_date);

// Plot results
plotXY(plt, dates, predictions);

// Filter data for prediction window
predictions = selif(osa_pred~y, data[., "date"] .>= st_date);

// Compute residuals
residuals = delcols(predictions, "CBO_GAP") - predictions[., "CBO_GAP"];

// Compute the MSE for prediction window
mse  = meanc((residuals).^2);

proc (1) = osaLasso(y_train, x_train, x_test, lambda);
    local lasso_prediction;
    
    /*
    ** Lasso Model
    */
    // Declare 'mdl' to be an instance of a
    // lassoModel structure to hold the estimation results
    struct lassoModel mdl;

    // Estimate the model with default settings
    mdl = lassoFit(y_train, x_train, lambda);
    
    // Make predictions using test data
    lasso_prediction = lmPredict(mdl, x_test);
    
    retp(lasso_prediction);
endp;

proc (1) = osaRidge(y_train, x_train, x_test, lambda);
    local ridge_prediction;
    
    /*
    ** Ridge Model
    */
    // Declare 'mdl' to be an instance of a
    // ridgeModel structure to hold the estimation results
    struct ridgeModel mdl;

    // Estimate the model with default settings
    mdl = ridgeFit(y_train, x_train, lambda);
    
    // Make predictions using test data
    ridge_prediction = lmPredict(mdl, x_test);
    
    retp(ridge_prediction);
endp;

proc (1) = osaDF(y_train, x_train, x_test, struct dfControl dfc);
    local df_prediction;
    
    /*
    ** Decision Forest Model
    */
    // Declare 'mdl' to be an instance of a
    // dfModel structure to hold the estimation results
    struct dfModel mdl;

    // Estimate the model with default settings
    mdl = decForestRFit(y_train, x_train, dfc);
    
    // Make predictions using test data
    df_prediction = decForestPredict(mdl, x_test);
    
    retp(df_prediction);
endp;
