new;
library gml;
rndseed 23423;

/*
** Load data and prepare data
*/
// Load dataset
dataset = __FILE_DIR $+ "reg_data.gdat";
data = loadd(dataset);

/*
** Extract outcome and features
*/
// Extract outcome variable
y = data[., "CBO_GAP"];

// Extract features
X = delcols(data, "date"$|"CBO_GAP");

/*
** Split data into 70% training
** and 30% testing sets
*/
shuffle = "False";
{ y_train, y_test, x_train, x_test } = traintestSplit(Y, X, 0.7, shuffle);

/*
** Settings for decision forest
*/
// Declare an instance of the
// dfControl structure
struct dfControl dfc;

// Set default values for
// structure members
dfc = dfControlCreate();

// Turn on out-of-bag error calculation
dfc.oobError = 1;

// Set features per split
dfc.featuresPerSplit = 6;

/*
** Initialize grid and
** storage matrices
*/
// Set potential values for
// minimum obs per leaf
minObsLeaf = seqa(1, 1, 20);

// Set potential values for 
// percentage of observations
// in tree
pctObs = seqa(0.7, 0.1, 4);
 
// Storage matrices
test_mse = zeros(rows(minObsLeaf), rows(pctObs));

for i(1, rows(minObsLeaf), 1);
 
    // Set the minimum obs per leaf
    dfc.minObsLeaf = minObsLeaf[i];
 
    for j(1, rows(pctObs), 1);
 
        // Set percentage of obs used for each tree
        dfc.pctObsPerTree = pctObs[j];
 
        /*
        ** Decision Forest Model
        */
        // Declare 'mdl' to be an instance of a
        // dfModel structure to hold the estimation results
        struct dfModel mdl;
 
        // Estimate the model with default settings
        mdl = decForestRFit(y_train, X_train, dfc);
 
        // Make predictions using testing data
        df_prediction_test = decForestPredict(mdl, X_test);
 
        /*
        ** Compute and store mse
        */
        // Testing set MSE
        test_mse[i, j] = meanSquaredError(y_test, df_prediction_test);
 
    endfor;
endfor;

/*
** Finding minimum MSE values in 
** output matrix
*/
// Create a column vector with the minimum MSE
// values for each column
mse_col_mins = minc(test_mse);
 
// Find the index of the smallest
// value in 'mse_col_mins'
idx_col_min = minindc(mse_col_mins);

// Find the row that contains the smallest MSE value
idx_row_min = minindc(test_mse[.,idx_col_min]);
 
// Extract the lowest MSE across all
// combinations of tuning parameters
MSE_optimal = test_mse[idx_row_min, idx_col_min];
 
// Print results
sprintf( "Minimum testing MSE: %4f", MSE_optimal);
print "Minimum MSE occurs with";
sprintf("  minimum samples per leaf      : %d", minObsLeaf[idx_row_min]);
sprintf("  percentage of samples per tree: %g%%", 100 * pctObs[idx_col_min]); 

