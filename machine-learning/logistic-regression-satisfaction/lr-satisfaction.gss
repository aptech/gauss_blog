/*
**
*/
new;
library gml;
rndseed 8906876;

/*
** Load datafile
*/
load_path = "data";
fname = "/airline_satisfaction.gdat";

// Load all data except id
airline_data = loadd(load_path $+ fname);
//airline_data = delcols(airline_data, "id");

// Split data
y = airline_data[., "satisfaction"];
X = delcols(airline_data, "satisfaction"$|"id");

/*
** Create dummy variables
*/
// Get all variable names
col_names = getColNames(X);

// Get types of all variables
col_types = getColTypes(X);

// Select names of variables
// that are categorical
cat_names = selif(col_names, col_types .== "category");

// Loop through categorical variables
// to create dummy variables
// Note there are 19 cat variables
dummy_vars = {};
for i(1, rows(cat_names), 1); 
    dummy_vars = dummy_vars~oneHot(X[., cat_names[i]]);
endfor;

X = delcols(x, cat_names)~dummy_vars;

// Split data into 70% training and 30% test set
{ y_train, y_test, X_train, X_test } = trainTestSplit(y, X, 0.7);

/*
** Data rescaling
*/
// Number of variables to rescale
numeric_vars = 4;
 
// Rescale training data
{ X_train[.,1:numeric_vars], x_mu, x_sd } = rescale(X_train[.,1:numeric_vars], "standardize");
 
// Rescale test data using same scaling factors as x_train
X_test[.,1:numeric_vars] = rescale(X_test[.,1:numeric_vars], x_mu, x_sd);

/*  
** Preliminary data exploration
*/
// Examine our outcome variable
frequency(airline_data, "satisfaction");

/*************************************
** Base case model
** No regularization
*************************************/
print "No regularization";
/*
** Training
*/
// Declare 'lr_mdl' to be an 'logisticRegModel' structure
// to hold the trained model
struct logisticRegModel lr_mdl;

// Train the logistic regression classifier
lr_mdl = logisticRegFit(y_train, X_train);

/*
** Testing
*/
// Make predictions on the test set, from our trained model
y_hat =lmPredict(lr_mdl, X_test);

/*
** Model evaluation
*/
call classificationMetrics(y_test, y_hat);


/*************************************
** L2 Regularization
*************************************/
print "L2 regularization";
/*
** Training
*/
// Declare 'lrc' to be a logisticRegControl
// structure and fill with default settings 
struct logisticRegControl lrc;
lrc = logisticRegControlCreate();

// Set regularization parameters
lrc.l2 = 0.05;

// Train the logistic regression classifier
lr_mdl = logisticRegFit(y_train, X_train, lrc);

/*
** Testing
*/
// Make predictions on the test set, from our trained model
y_hat_l2 =lmPredict(lr_mdl, X_test);

/*
** Model evaluation
*/
call classificationMetrics(y_test, y_hat_l2);


